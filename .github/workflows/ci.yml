---
name: "CI"
on:  # yamllint disable
  - "push"
  - "pull_request"

jobs:
  black:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: black"
        run: "poetry run invoke black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: flake8"
        run: "poetry run invoke flake8"
  hadolint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Install hadolint"
        run: "curl -Lo /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.0.0/hadolint-Linux-x86_64 && chmod +x /usr/local/bin/hadolint"
      - name: "Linting: hadolint"
        run: "poetry run invoke hadolint"
  check-migrations:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
    services:
      postgres:
        image: "postgres:13"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Run check migrations"
        run: "poetry run invoke check-migrations"
    needs:
      - "black"
      - "flake8"
      - "hadolint"
  tests-postgres:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
    services:
      postgres:
        image: "postgres:13"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "{{ matrix.python-version }}"

      # - name: "Set up Python"
      #   uses: "actions/setup-python@v2"
      #   id: "python-setup"
      #   with:
      #     python-version: "${{ matrix.python-version }}"
      # - name: "Install Poetry"
      #   run: "pip install poetry"
      # - name: "Load Environment From Cache"
      #   uses: "actions/cache@v2"
      #   id: "cached-poetry"
      #   with:
      #     path: "~/.cache/pypoetry/virtualenvs/"
      #     key: "${{ runner.os }}-poetry-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('./poetry.lock') }}"
      # - name: "Install Dependencies"
      #   run: "poetry install --no-interaction --no-root"
      # - name: "Install Nautobot"
      #   run: "poetry install --no-interaction"
      - name: "Run unittest"
        run: "poetry run invoke unittest --failfast --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"
    needs:
      - "check-migrations"
  tests-mysql:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.6", "3.7", "3.8", "3.9" ]
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "root"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_HOST: "127.0.0.1"
      NAUTOBOT_DB_PORT: "3306"
      NAUTOBOT_DB_ENGINE: "django.db.backends.mysql"
    services:
      mysql:
        image: "mysql"
        env:
          MYSQL_ROOT_PASSWORD: "decinablesprewad"
          MYSQL_PASSWORD: "decinablesprewad"
          MYSQL_DATABASE: "nautobot"
        ports:
          - "3306:3306"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "{{ matrix.python-version }}"

      # - name: "Check out repository code"
      #   uses: "actions/checkout@v2"
      # - name: "Set up Python"
      #   uses: "actions/setup-python@v2"
      #   id: "python-setup"
      #   with:
      #     python-version: "${{ matrix.python-version }}"
      # - name: "Install Required Dependencies for MySql Client"
      #   run: "sudo apt-get update && sudo apt-get install --no-install-recommends -y default-libmysqlclient-dev gcc"
      # - name: "Install Poetry"
      #   run: "pip install poetry"
      # - name: "Load Environment From Cache"
      #   uses: "actions/cache@v2"
      #   id: "cached-poetry"
      #   with:
      #     path: "~/.cache/pypoetry/virtualenvs/"
      #     key: "${{ runner.os }}-poetry-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('./poetry.lock') }}"
      # - name: "Install Dependencies"
      #   run: "poetry install --no-interaction --no-root --extras mysql"
      # - name: "Install Nautobot"
      #   run: "poetry install --no-interaction"
      - name: "Run unittest"
        run: "poetry run invoke unittest --failfast --keepdb"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"
    needs:
      - "check-migrations"
  integration-test:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_LOCAL: "True"
      NAUTOBOT_DB_USER: "nautobot"
      NAUTOBOT_DB_PASSWORD: "decinablesprewad"
      NAUTOBOT_DB_ENGINE: "django.db.backends.postgresql"
      NAUTOBOT_SELENIUM_URL: "http://localhost:4444/wd/hub"
    services:
      postgres:
        image: "postgres:13"
        env:
          POSTGRES_USER: "nautobot"
          POSTGRES_PASSWORD: "decinablesprewad"
          POSTGRES_DB: "nautobot"
        ports:
          - "5432:5432"
      redis:
        image: "redis:6-alpine"
        ports:
          - "6379:6379"
      selenium:
        image: "selenium/standalone-firefox:latest"
        ports:
          - "4444:4444"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
        with:
          python-version: "{{ matrix.python-version }}"


      # - name: "Check out repository code"
      #   uses: "actions/checkout@v2"
      # - name: "Set up Python"
      #   uses: "actions/setup-python@v2"
      #   id: "python-setup"
      #   with:
      #     python-version: "3.9"
      # - name: "Install Poetry"
      #   run: "pip install poetry"
      # - name: "Load Environment From Cache"
      #   uses: "actions/cache@v2"
      #   id: "cached-poetry"
      #   with:
      #     path: "~/.cache/pypoetry/virtualenvs/"
      #     key: "${{ runner.os }}-poetry-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('./poetry.lock') }}"
      # - name: "Install Dependencies"
      #   run: "poetry install --no-interaction --no-root"
      # - name: "Install Nautobot"
      #   run: "poetry install --no-interaction"
      - name: "Run Integration Tests"
        # If NAUTOBOT_SELENIUM_HOST is set to 'localhost' or '127.0.0.1' the connection does not work
        run: "NAUTOBOT_SELENIUM_HOST=`hostname -f` poetry run invoke integration-test --keepdb --append"
      - name: "Run coverage"
        run: "poetry run invoke unittest-coverage"
    needs:
      - "tests-postgres"
      - "tests-mysql"
